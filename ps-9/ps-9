import numpy as np
from scipy.sparse import diags
from scipy.sparse.linalg import spsolve

# Constants given in the problem
M = 9.109e-31  # Mass of electron in kg
L = 1e-8       # Box length in meters
N = 1000       # Number of spatial slices
a = L / N      # Spatial grid size
h_bar = 1.0545718e-34  # Reduced Planck's constant
i_h_bar = 1j * h_bar   # i * h_bar

# Initial conditions
x0 = L / 2
sigma = 1e-10
k = 5e10

# Time step
h = 1e-18

# Construct the initial wavefunction Ïˆ(x,0)
x = np.linspace(0, L, N)
psi_0 = np.exp(-((x - x0) ** 2) / (2 * sigma ** 2)) * np.exp(1j * k * x)

# Coefficients for the tridiagonal matrices A and B
a1 = 1 + h * i_h_bar / (2 * M * a**2)
a2 = - h * i_h_bar / (4 * M * a**2)
b1 = 1 - h * i_h_bar / (2 * M * a**2)
b2 = h * i_h_bar / (4 * M * a**2)

# Construct the tridiagonal matrices A and B
diagonals_A = [a1 * np.ones(N), a2 * np.ones(N-1), a2 * np.ones(N-1)]
A = diags(diagonals_A, [0, -1, 1]).toarray()

diagonals_B = [b1 * np.ones(N), b2 * np.ones(N-1), b2 * np.ones(N-1)]
B = diags(diagonals_B, [0, -1, 1]).toarray()

# Boundary conditions
A[0, 0] = A[-1, -1] = 1
B[0, 0] = B[-1, -1] = 1
A[0, 1] = A[1, 0] = A[-1, -2] = A[-2, -1] = 0
B[0, 1] = B[1, 0] = B[-1, -2] = B[-2, -1] = 0

# Perform the Crank-Nicolson step
# Multiply by the matrix B to get vector v
v = B.dot(psi_0)

# Solve the linear system A*psi(t+h) = v for psi(t+h)
psi_t_h = spsolve(A, v)

# Check the size of the resulting vector to ensure it's correct
psi_t_h.shape
